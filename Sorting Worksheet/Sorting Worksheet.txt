1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]
temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]
temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

This code doesn't work because both values 0 and 1 in the list are being set equal to the temp value. 0 needs to be set equal to 1, not the other way around.

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
0    74    8   98   47   62   12   11    97  60
0    8     74  98   47   62   12   11    97  60
0    8     11  98   47   62   12   74    97  60
0    8     11  12   47   62   98   74    97  60
0    8     11  12   47   62   98   74    97  60
0    8     11  12   47   60   98   74    97  62
0    8     11  12   47   60   62   74    97  98
0    8     11  12   47   60   62   74    97  98
0    8     11  12   47   60   62   74    97  98
0    8     11  12   47   60   62   74    97  98


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25
0   18   92   47   40   58    74   36   29   25
0   18   25   47   40   58    74   36   29   92
0   18   25   29   40   58    74   36   47   92
0   18   25   29   36   58    74   40   47   92
0   18   25   29   36   40    74   58   47   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0    18   40   47   58   74    92  36   29   25
0    18   36   40   47   58    74  92   29   25
0    18   25   36   40   47    58  74   92   29
0    18   25   29   36   40    47  58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

    37   11   14   50   24    7   17   88   99    9
    11   37   14   50   24    7   17   88   99    9
    11   14   37   50   24    7   17   88   99    9
    11   14   37   50   24    7   17   88   99    9
    11   14   24   37   50    7   17   88   99    9
    7    11   14   24   37    50  17   88   99    9
    7    11   14   17   24    37  50   88   99    9
    7    11   14   17   24    37  50   88   99    9
    7    11   14   17   24    37  50   88   99    9
    7    9    11   14   17    24  37   50   88    99

8. Explain what `min_pos` does in the selection sort.

min_pos finds the pos that has the smallest number

9. Explain what `cur_pos` does in the selection sort.

cur_pos starts the scan at the min_pos since min_pos = cur_pos in the code

10. Explain what `scan_pos` does in the selection sort.

scan_pos goes through each value in the list so that each value can be compared to the min_pos

11. Explain what `key_pos` and `key_value` are in the insertion sort.

key_pos keeps track of the position that separates the sorted portion and the unsorted portion.
key_value checks each key_pos to the values to its left to see where the value should be inserted.

12. Explain `scan_pos` in the insertion sort.

scan_pos is used to scan through each value and move them up until the position for the key_value to go into is reached

13. Look at the example sort program here:

https://learn.arcade.academy/chapters/27_sorting/sorting.html#full-sorting-example

Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop is run. Modify the program to work with a list of 100. Paste the code you used here. Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!) Inside loop for selection sort should be about 5,000, and insertion sort 2,500. Double-check if you don't get numbers close to these.

import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    in_total = 0
    out_total = 0

    # Loop through the entire array
    for cur_pos in range(len(my_list)):

        out_total += 1

        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):

            in_total += 1

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp

    print("Outside loop total =", out_total)
    print("Inside loop total =", in_total)


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    out_total = 0
    in_total = 0

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):

        out_total += 1

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

            in_total += 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print("Outside loop total =", out_total)
    print("Inside loop total =", in_total)


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()


Original List
 63 70 26 68 15 85 50 67 13 95 56 23  4 19 13  1 63 65 31  4 76  6 82 34 87 35 33 25 74 97  3 73 97  6 89  9 87 94  2  5 20 66 30 50 64 46 62  3 66 44 59 57 81 53 73 16 74 16 51 96 42 59 40 61 27 74 69 79 44 15  4  1 87 65 76  6 92 98 86 78 64 68 43  9 78 70 34 59 72 20 30 13 38 28 85 44 52 35 53 63
Selection Sort
Outside loop total = 100
Inside loop total = 4950
  1  1  2  3  3  4  4  4  5  6  6  6  9  9 13 13 13 15 15 16 16 19 20 20 23 25 26 27 28 30 30 31 33 34 34 35 35 38 40 42 43 44 44 44 46 50 50 51 52 53 53 56 57 59 59 59 61 62 63 63 63 64 64 65 65 66 66 67 68 68 69 70 70 72 73 73 74 74 74 76 76 78 78 79 81 82 85 85 86 87 87 87 89 92 94 95 96 97 97 98
Insertion Sort
Outside loop total = 99
Inside loop total = 2341
  1  1  2  3  3  4  4  4  5  6  6  6  9  9 13 13 13 15 15 16 16 19 20 20 23 25 26 27 28 30 30 31 33 34 34 35 35 38 40 42 43 44 44 44 46 50 50 51 52 53 53 56 57 59 59 59 61 62 63 63 63 64 64 65 65 66 66 67 68 68 69 70 70 72 73 73 74 74 74 76 76 78 78 79 81 82 85 85 86 87 87 87 89 92 94 95 96 97 97 98



To turn in: Upload your .py file. Just drag it from PyCharm to the upload for the assignment. (BUT WAIT! Make sure you include the results from #13, and not just the program.)